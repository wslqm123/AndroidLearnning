# .github/workflows/android-ci.yml

# 1. Workflow 的名称 (显示在 GitHub Actions 页面)
name: Android CI Build

# 2. 触发器 (Triggers): 什么事件会触发这个 Workflow
on:
  # 当有代码推送到 main 分支时触发
  push:
    branches: [ main ]
  # 当有 Pull Request 指向 main 分支时触发 (可选)
  pull_request:
    branches: [ main ]

  # 允许手动触发 (可选，方便测试)
  workflow_dispatch:

# 3. 作业 (Jobs): Workflow 由一个或多个 Job 组成，它们可以并行或串行执行
jobs:
  # 定义一个名为 'build' 的 Job
  build:
    # 运行环境: 指定运行 Job 的虚拟机类型，'ubuntu-latest' 是常用的 Linux 环境
    runs-on: ubuntu-latest

    # Job 中的步骤 (Steps): 按顺序执行的命令或 Action
    steps:
      # 第 1 步: 检出代码 (Checkout Code)
      # 使用官方的 actions/checkout Action 来获取你的仓库代码
      - name: Checkout Repository code
        uses: actions/checkout@v4 # 建议使用最新的主版本号

      # 第 2 步: 设置 Java 开发环境 (Setup Java JDK)
      # Android 构建需要 JDK。指定你项目所需的版本 (例如 11 或 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Eclipse Temurin 是一个流行的 OpenJDK 发行版
          java-version: '17'     # 根据你的项目要求选择 11, 17 等

      # 第 3 步: (重要!) 赋予 Gradle Wrapper 执行权限
      # Linux 环境下需要给 gradlew 文件添加执行权限才能运行
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 第 4 步: (可选但强烈推荐) 缓存 Gradle 依赖
      # 缓存下载过的依赖库和 Gradle Wrapper，加快后续构建速度
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/dists
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## 第 5 步: 使用 Gradle 构建 Debug APK
      ## 运行 Gradle 命令来编译和打包 Debug 版本的 APK
      ## './gradlew' 会自动下载所需的 Gradle 版本 (如果缓存未命中或首次运行)
      #- name: Build Debug APK with Gradle
      #  run: ./gradlew assembleDebug # 'assembleDebug' 是标准的构建 Debug APK 的任务

      ## 第 6 步: 上传构建产物 (Upload Artifact)
      ## 将生成的 APK 文件上传为 GitHub Artifact，方便下载
      #- name: Upload Debug APK
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: app-debug-apk # 你为这个产物起的名字
      #    path: app/build/outputs/apk/debug/app-debug.apk # Debug APK 的标准输出路径，请根据你的项目确认
      #    # 如果你的 Module 名不是 'app'，请修改 'app/' 部分

      # 新增: 第 5 步: 解码 Keystore 文件
      # 从 Secrets 读取 Base64 编码的 Keystore 内容，解码并保存为临时文件
      - name: Decode Keystore
        # 在工作目录下创建一个 keystore 文件
        # 'secrets.RELEASE_KEYSTORE_BASE64' 引用你之前设置的 Secret
        # 将解码后的内容输出到 app/release.jks (路径可自定义，但要与 build.gradle 中的配置对应)
        run: echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > $GITHUB_WORKSPACE/app/release.jks
        # 检查 secrets 是否已设置，如果未设置则跳过此步骤（例如 PR 构建可能不需要签名）
        if: ${{ secrets.RELEASE_KEYSTORE_BASE64 != null }}

      # 修改: 第 6 步: 使用 Gradle 构建 Release AAB (或 APK)
      # 设置环境变量，供 build.gradle 读取签名信息
      # 运行 Gradle 命令构建 Release 包 (bundleRelease 生成 AAB, assembleRelease 生成 APK)
      - name: Build Release AAB with Gradle
        # 使用 env 块将 Secrets 作为环境变量传递给 Gradle 进程
        env:
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
          # 设置 Keystore 文件的路径环境变量
          RELEASE_KEYSTORE_PATH: "$GITHUB_WORKSPACE/app/release.jks"
        # 运行 'bundleRelease' 任务来构建 AAB (推荐用于 Google Play)
        # 如果需要 APK，则运行 'assembleRelease'
        run: ./gradlew assembleRelease
        # 仅当 secrets 存在时才执行此步骤
        if: ${{ secrets.RELEASE_KEYSTORE_BASE64 != null && secrets.RELEASE_STORE_PASSWORD != null && secrets.RELEASE_KEY_ALIAS != null && secrets.RELEASE_KEY_PASSWORD != null }}

      # 修改/新增: 第 7 步: 上传 Release AAB
      # 上传构建好的 AAB 文件
      - name: Upload Release AAB
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab # Artifact 名称
          path: app/build/outputs/apk/release/*.apk
          # 如果构建的是 AAB，路径是 app/build/outputs/bundle/release/*.aab ; AAB 文件的标准路径 (通常只有一个)
          # 如果构建的是 APK，路径是 app/build/outputs/apk/release/*.apk
        # 仅当上一步构建成功时上传
        if: ${{ success() && secrets.RELEASE_KEYSTORE_BASE64 != null }}
