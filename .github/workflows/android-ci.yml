# .github/workflows/android-ci.yml

name: Android CI Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/dists
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 第 5 步: 解码 Keystore 文件 (修正 if 条件)
      - name: Decode Keystore
        # 只有当 Secret 存在且不为空时才执行
        if: secrets.RELEASE_KEYSTORE_BASE64 != ''
        run: |
          echo "Decoding keystore..."
          # 确保目标目录存在 (如果你的 app 模块不在根目录，需要创建)
          mkdir -p $GITHUB_WORKSPACE/app
          echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > $GITHUB_WORKSPACE/app/release.jks
          echo "Keystore decoded."


      # --- 新增调试步骤 --- (修正 if 条件)
      - name: Verify Keystore File Existence
        # 只有当 Secret 存在且不为空时才执行 (与 Decode 步骤保持一致)
        if: secrets.RELEASE_KEYSTORE_BASE64 != ''
        run: |
          echo "Checking for keystore file at $GITHUB_WORKSPACE/app/release.jks"
          ls -l $GITHUB_WORKSPACE/app/release.jks || echo "Keystore file not found!"


      # 第 6 步: 使用 Gradle 构建 Release AAB (或 APK) (修正 env 变量)
      - name: Build Release AAB with Gradle
        # 环境变量，确保路径正确展开
        env:
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
          # 直接使用 Actions 上下文变量展开路径
          RELEASE_KEYSTORE_PATH: "${{ github.workspace }}/app/release.jks"
        run: ./gradlew bundleRelease # 或者 assembleRelease


      # 第 7 步: 上传 Release AAB (添加 if: success())
      - name: Upload Release AAB
        # 仅在前面的步骤成功时上传
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          # 确保路径和你的构建输出一致
          path: app/build/outputs/bundle/release/*.aab