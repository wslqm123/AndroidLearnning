# .github/workflows/android-ci.yml

# 1. Workflow 的名称 (显示在 GitHub Actions 页面)
name: Android CI Build

# 2. 触发器 (Triggers): 什么事件会触发这个 Workflow
on:
  # 当有代码推送到 main 分支时触发
  push:
    branches: [ main ]
  # 当有 Pull Request 指向 main 分支时触发 (可选)
  pull_request:
    branches: [ main ]

  # 允许手动触发 (可选，方便测试)
  workflow_dispatch:

# 3. 作业 (Jobs): Workflow 由一个或多个 Job 组成，它们可以并行或串行执行
jobs:
  # 定义一个名为 'build' 的 Job
  build:
    # 运行环境: 指定运行 Job 的虚拟机类型，'ubuntu-latest' 是常用的 Linux 环境
    runs-on: ubuntu-latest

    # Job 中的步骤 (Steps): 按顺序执行的命令或 Action
    steps:
      # 第 1 步: 检出代码 (Checkout Code)
      # 使用官方的 actions/checkout Action 来获取你的仓库代码
      - name: Checkout Repository code
        uses: actions/checkout@v4 # 建议使用最新的主版本号

      # 第 2 步: 设置 Java 开发环境 (Setup Java JDK)
      # Android 构建需要 JDK。指定你项目所需的版本 (例如 11 或 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Eclipse Temurin 是一个流行的 OpenJDK 发行版
          java-version: '17'     # 根据你的项目要求选择 11, 17 等

      # 第 3 步: (重要!) 赋予 Gradle Wrapper 执行权限
      # Linux 环境下需要给 gradlew 文件添加执行权限才能运行
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 第 4 步: (可选但强烈推荐) 缓存 Gradle 依赖
      # 缓存下载过的依赖库和 Gradle Wrapper，加快后续构建速度
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/dists
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 第 5 步: 解码 Keystore 文件
      - name: Decode Keystore
        run: echo "${{ secrets.RELEASE_KEYSTORE_BASE64 }}" | base64 --decode > $GITHUB_WORKSPACE/app/release.jks
        # if: ${{ secrets.RELEASE_KEYSTORE_BASE64 != null }}  <-- 完全删除这一行

      # 第 6 步: 使用 Gradle 构建 Release AAB (或 APK)
      - name: Build Release AAB with Gradle
        env:
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
          RELEASE_KEYSTORE_PATH: "$GITHUB_WORKSPACE/app/release.jks"
        run: ./gradlew bundleRelease # 或者 assembleRelease
        # if: ${{ secrets.RELEASE_KEYSTORE_BASE64 != null && secrets.RELEASE_STORE_PASSWORD != null && secrets.RELEASE_KEY_ALIAS != null && secrets.RELEASE_KEY_PASSWORD != null }} <-- 完全删除这一行

      # 第 7 步: 上传 Release AAB (保持不变或也暂时移除 if)
      - name: Upload Release AAB
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: app/build/outputs/bundle/release/*.aab # 或 APK 路径
        # 如果这一步也有 if，可以考虑暂时也移除，或者保持原样看是否报错
        if: ${{ success() && secrets.RELEASE_KEYSTORE_BASE64 != null }}