# 文件路径: .github/workflows/android-ci.yml

# Workflow 名称，将显示在 GitHub Actions 页面
name: Android CI Build

# 触发 Workflow 的事件
on:
  # 仅当一个 Git 标签被推送时触发 (例如 v1.0.0, v1.1-rc1 等)
  push:
    tags:
      - 'v*' # 匹配以 'v' 开头的标签
      # 你可以使用更精确的模式，例如 'v*.*.*' 只匹配 vX.Y.Z 格式
  # 当有 Pull Request 指向 main 分支时触发 (可选)
  pull_request:
    branches: [ main ]
  # 允许通过 GitHub UI 手动触发 (可选)
  workflow_dispatch:

# 定义 Workflow 中的作业 (Jobs)
jobs:
  # 作业 ID，可以自定义，例如 'build-and-sign'
  build:
    # 指定运行作业的虚拟机环境
    runs-on: ubuntu-latest

    # 作业包含的步骤 (按顺序执行)
    steps:
      # 步骤 1: 检出代码
      # 拉取你的仓库代码到运行环境中
      - name: Checkout Repository code
        uses: actions/checkout@v4 # 使用官方的 checkout action 最新主版本

      # 步骤 2: 设置 Java 环境
      # 安装指定版本的 JDK，Android 构建需要
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # OpenJDK 发行版
          java-version: '17'     # 你项目所需的 JDK 版本

      # 步骤 3: 赋予 Gradle Wrapper 执行权限
      # 在 Linux/macOS 环境下，需要给 gradlew 脚本添加执行权限
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 步骤 4: 缓存 Gradle 依赖 (推荐)
      # 缓存下载的库和 Gradle Wrapper，加速后续构建
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          # 需要缓存的路径
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/dists
          # 缓存的唯一标识符，基于操作系统和 Gradle 相关文件 hash
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          # 可选的回退 key
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 步骤 5: 解码并创建 Keystore 文件 (如果 Secret 存在)
      # 从 GitHub Secrets 读取 Base64 编码的 Keystore 内容，解码并写入文件
      - name: Decode Keystore
        # 将 Secret 传入环境变量，方便在脚本中安全引用
        env:
          KEYSTORE_BASE64_SECRET: ${{ secrets.RELEASE_KEYSTORE_BASE64 }}
        run: |
          # 在脚本内部检查环境变量是否为空 (即 Secret 是否设置且有内容)
          if [ -z "$KEYSTORE_BASE64_SECRET" ]; then
            # 如果 Secret 为空，打印警告并跳过解码，让后续 Gradle 任务因缺少 Keystore 而失败 (这是预期行为)
            echo "Warning: RELEASE_KEYSTORE_BASE64 secret is not set or is empty. Skipping keystore decoding."
          else
            # 如果 Secret 存在，执行解码
            echo "Decoding keystore..."
            # 确保目标目录存在 (根据你的项目结构调整路径，通常是 app 模块目录)
            mkdir -p $GITHUB_WORKSPACE/app
            # 将环境变量中的 Base64 内容解码并写入指定路径的文件
            # $GITHUB_WORKSPACE 是 GitHub Actions 提供的代码检出目录的绝对路径
            echo "$KEYSTORE_BASE64_SECRET" | base64 --decode > $GITHUB_WORKSPACE/app/release.jks
            echo "Keystore decoded successfully to $GITHUB_WORKSPACE/app/release.jks"
          fi

      # 步骤 6: 使用 Gradle 构建 Release AAB
      # 执行 Gradle 命令来编译和打包应用
      - name: Build Release AAB with Gradle
        # 设置 Gradle 构建所需的环境变量，引用 GitHub Secrets
        env:
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
          # 提供 Keystore 文件的绝对路径给 Gradle (使用 github.workspace 上下文变量确保路径正确)
          RELEASE_KEYSTORE_PATH: "${{ github.workspace }}/app/release.jks"
        # 运行 Gradle Wrapper 执行 bundleRelease 任务 (生成 AAB)
        # 如果需要 APK，可以改为 assembleRelease
        run: ./gradlew assembleRelease

      # 步骤 7: 上传构建产物 (AAB 文件)
      # 将生成的 AAB 文件作为 Workflow 的 Artifact 上传，方便下载
      # `if: success()` 确保只有在前面的所有步骤都成功时才执行上传
      - name: Upload Release AAB
        if: success() # 仅在构建成功时上传
        uses: actions/upload-artifact@v4
        with:
          # 上传后的 Artifact 名称 (在 Actions 页面显示)
          name: app-release-apk # 如果是AAB，name: app-release-aab
          # 需要上传的文件路径 (匹配 Gradle 构建输出的 AAB 文件)
          # 注意通配符 * 的使用
          path: app/build/outputs/apk/release/*.apk # 如果是AAB，path: app/build/outputs/bundle/release/*.aab
          # 可选：设置 Artifact 的保留天数 (默认 90 天)
          # retention-days: 7