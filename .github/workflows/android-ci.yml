# .github/workflows/android-ci.yml

name: Android CI Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/dists
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 第 5 步: 解码 Keystore 文件 (移除 if 条件, 在脚本内检查)
      - name: Decode Keystore
        # 注意：这里不再有 if 条件
        env: # 将 secret 传入 env，方便脚本内引用，避免直接在 run 中使用 ${{ }} 可能的注入问题
          KEYSTORE_BASE64_SECRET: ${{ secrets.RELEASE_KEYSTORE_BASE64 }}
        run: |
          # 在脚本内部检查环境变量是否为空
          if [ -z "$KEYSTORE_BASE64_SECRET" ]; then
            echo "Warning: RELEASE_KEYSTORE_BASE64 secret is not set or is empty. Skipping keystore decoding."
          else
            echo "Decoding keystore..."
            mkdir -p $GITHUB_WORKSPACE/app # 确保目录存在
            # 使用环境变量进行解码
            echo "$KEYSTORE_BASE64_SECRET" | base64 --decode > $GITHUB_WORKSPACE/app/release.jks
            echo "Keystore decoded."
          fi


      # 第 6 步: 验证 Keystore 文件存在性 (保持原样, 无需 if)
      # 这个步骤现在会反映 Decode Keystore 步骤的结果
      # 如果上面跳过了解码，这里会显示文件不存在
      - name: Verify Keystore File Existence
        run: |
          echo "Checking for keystore file at $GITHUB_WORKSPACE/app/release.jks"
          ls -l $GITHUB_WORKSPACE/app/release.jks || echo "Keystore file not found at $GITHUB_WORKSPACE/app/release.jks (This is expected if the secret was empty)."


      # 第 7 步: 使用 Gradle 构建 Release AAB (保持原样, 无需 if)
      - name: Build Release AAB with Gradle
        env:
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
          RELEASE_KEYSTORE_PATH: "${{ github.workspace }}/app/release.jks" # 保持修正后的路径
        run: ./gradlew bundleRelease # 或者 assembleRelease


      # 第 8 步: 上传 Release AAB (保持 if: success())
      - name: Upload Release AAB
        if: success() # 仅在整个 job 成功时上传
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: app/build/outputs/bundle/release/*.aab